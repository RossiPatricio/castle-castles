
								CASTLE & CASTLES


Idea general:
Rescatar a la princesa custodiada por un dragon en un castillo el cual esta dividido por pisos y cada uno es un nivel.
La princesa se encuentra en el ultimo cuarto de la torre mas alta. Si perdemos caemos al piso 1.
Tengo pensado que los pisos se resuelvan mas a modo de puzzle que de accion. Y que una vez que aprendas a superar un piso en especifico cuando te toque
volver ya vas a saber que hacer. (Esto puede hacer que me incline por no tener puntos de habilidad que vuelven a los personajes mas fuertes sino que los 
verdaderos puntos de habilidad los sube el jugador aprendiendo como resolver los niveles)

En cada piso vamos a tener al menos una interaccion con el dragon basada en toma de decisiones como puede ser: correr, esconderse, etc. 


Enemigos:

-Murcielagos
-Esqueletos
-Jefe de la torre final: Un fantasma al cual le deberemos ganar una partida de ajedrez para evitar pelear con el 
-Jefe final: El dragon



Gameplay:


- Vamos a poder elegir al heroe que se atreva a rescatar a la princesa. 

	Caballero: habil con la espada, agil
	Mago: realiza encantamientos, inteligente
	Ogro: super fuerza



- Comienza el juego

- Atravesando un puente viendo el castillo y entramos en el por la puerta principal

	(Este se encuentra muy maltratado, sucio, con cadaveres que ya son esqueletos)

- Este primer piso es el nivel 1:

NIVEL 1: Primer vistazo al dragon + enemigos basicos + puzzle para subir al siguiente piso


NIVELES INTERMEDIOS: No puede ser tan intrincado porque la idea es finalizar el proyecto antes de que termine el año.
Se van a basar en matar enemigos, puzzles y toma de decisiones con respecto al dragon



TORRE FINAL: Donde se encuentra la princesa

	(Esta torre se encuentra custodiada por un fantasma que murio intentando rescatar a la princesa y su alma quedo atrapada)



___________________


Tal vez:


- Cada partida te da puntos y estos funcionan para subir habilidades 

- Si el heroe muere vuelve a empezar o tal vez tenga 3 vidas. 

- Giro de guion: El dragon es en realidad una princesa y tomamos una serie de decisiones (tal vez siendo el mago) podremos sacarla de su maldicion
Esto puede significar, o no, que la princesa a rescatar sea el dragon. O puede tratarse de otra princesa.
(Idea sacada de la teoria de shrek)


___________________


Inspiracion:

-Shrek 
-El principe de persia
-Harry potter (no solo por el castillo. Me imagino el juego parecido a los primeros videojuegos de las peliculas)
-El gotico
-Dracula
-Edgar allan poe
-Oscar Wilde (el fantasma de canterville)
-mario64

-Mapa de dark souls: intrincado y donde si caemos por x lugar llegamos a una zona del juego que puede ser avance o retroceso 
	Los enemigos estan siempre en el mismo lugar y una vez que volvemos a la zona el enemigo vuelve a aparecer


________________________________________________________________________________________________________________________________________________________________________

Esquema de clases:

CLASS ENTIDAD
- Clase general para todos los PJs con atributos y metodos comunes para Heroes, Enemigos, NPCs
atributos comunes: nombre, salud, ataque, defensa, posicion (para ubicarlos en el mapa)
metodos comunes: moverse(), recibir_daño(), atacar()


CLASS ENTIDAD
	CLASS HEROE(ENTIDAD)
		CLASS MAGO(HEROE)
		CLASS CABALLERO(HEROE)
	CLASS ENEMIGO(ENTIDAD)
		CLASS ENEMIGO_COMUN(ENEMIGO)
		CLASS JEFE(ENEMIGO)
	CLASS NPC(ENTIDAD)



CLASS HEROE:

Se trata de nuestro personaje protagonista el cual podremos elegir entre las clases Mago, Ogro o Caballero. Cada uno con distintas caracteristicas.


________________________________________________________________________________________________________________________________________________________________________

Romper el problema en problemas mas pequeños:


-El mapa

-Implementar la Lógica de los Puzzles
Los puzzles son un elemento central en tu juego. En Unity, podrías usar Triggers y Scripts para crear la lógica de los acertijos en cada piso.
Cada piso tendría su propio script con la lógica del acertijo que, al resolverse, desbloquee el camino hacia el siguiente nivel.

-Diseño de Niveles
Fácil de probar en Unity: Unity permite ajustar y probar el diseño de niveles visualmente, lo cual es ideal para un castillo de varios pisos.
Puedes crear un prototipo simple del castillo para ver cómo funcionan los elementos de tus niveles en conjunto, y luego expandir los detalles gráficos.

- Chekpoints

-Sistema de Reintentos
Basado en mi idea, si pierdes en un nivel, regresas al piso 1. Esto podría implementarse como un sistema de “checkpoints” donde el personaje revive en 
el piso inicial, o un sistema que resetea solo los niveles no superados.

Sistemas de Interacción y Combate: 
Podrías aprovechar el prototipo en Python para desarrollar las interacciones básicas y las mecánicas de combate, 
como el daño, la defensa, y la habilidad especial. Esto te ayudará a detectar cualquier ajuste necesario antes de implementar animaciones en Unity.

Pruebas de Inteligencia Artificial: Considera experimentar con comportamientos de IA básicos en Python 
(como enemigos patrullando o atacando al jugador) para entender mejor cómo quieres que los enemigos reaccionen y persigan. 
Luego podrás trasladar esta lógica a Unity.

Diseño de Niveles y Enfoque en Jugabilidad: Tener una visión clara de los niveles y la historia (como el rescate de la princesa) 
le dará una identidad fuerte al juego. Puedes ir dibujando bocetos de los niveles o mapas para tener una idea del espacio y 
los desafíos que el jugador enfrentará en cada etapa.

Migración Estructurada: Cuando te sientas listo para migrar, lleva la lógica de Python a C# en Unity de forma gradual, 
probando cada mecánica a medida que la implementas. Esto permitirá que la transición sea más fluida y puedas corregir cualquier 
problema que surja al cambiar de lenguaje y plataforma.




________________________________________________________________________________________________________________________________________________________________________


TECHNICAL

-Python:
El prototipo principal (al menos de las clases) lo voy a hacer en python para luego pasarlo a C# ya que el motor grafico que elegi es Unity

-IA:
ChatGPT va a ser mi principal aliado.


________________________________________________________________________________________________________________________________________________________________________



PRIMERA VERSION


La idea es que sea muy simple

- Personajes basicos (sin jefes y con un solo tipo de enemigo)
- Un solo tipo de heroe
- Mapa basico (Sin divirlo por pisos, niveles, puzzles)
- Interaccion basica entre el jugador y los enemigos 











